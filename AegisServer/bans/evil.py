data = """"""

import base64
import sys, StringIO, contextlib

@contextlib.contextmanager
def stdoutIO(stdout=None):
    old = sys.stdout
    if stdout is None:
        stdout = StringIO.StringIO()
    sys.stdout = stdout
    yield stdout
    sys.stdout = old
    
with stdoutIO() as s:
    exec base64.b64decode(data)
    print s.getvalue()
