data = """aW1wb3J0IHJhbmRvbSwgdGltZQoKZGVmIGNodW5rcyhsLCBuKTogCiAgICBmb3IgaSBpbiByYW5nZSgwLCBsZW4obCksIG4pOgogICAgICAgIHlpZWxkIGxbaTppK25dCiAgICAgICAgCmRlZiBnZXROYW1lc0NoYW5uZWwoY2hhbm5lbCxpcmMpOgogICAgaXJjLnNlbmQoIk5BTUVTIHswfQ0KIi5mb3JtYXQoY2hhbm5lbCkuZW5jb2RlKCJVVEYtOCIpKQogICAgaXJjbXNnID0gaXJjLnJlY3YoMjA0OCkKICAgIGlyY21zZyA9IGlyY21zZy5kZWNvZGUoIlVURi04IikKICAgIGlyY21zZyA9IGlyY21zZy5zdHJpcCgiDQoiKQogICAgaXJjbXNnID0gaXJjbXNnLnN0cmlwKCI6Iikuc3BsaXQoIiA6IiwxKVsxXS5zcGxpdCgiICIpCiAgICByZXR1cm5lZCA9IFtdCiAgICBmb3IgaSBpbiBpcmNtc2c6CiAgICAgICAgaWYgaS5zdGFydHN3aXRoKCJAIik6CiAgICAgICAgICAgIHJldHVybmVkLmFwcGVuZChbaS5yZXBsYWNlKCJAIiwiIiwxKSwgIm9wIiBdKQogICAgICAgIGVsaWYgaS5zdGFydHN3aXRoKCIrIik6CiAgICAgICAgICAgIHJldHVybmVkLmFwcGVuZChbaS5yZXBsYWNlKCIrIiwiIiwxKSwgInZvaWNlIiBdKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJldHVybmVkLmFwcGVuZChbaSwibm9uZSJdKQogICAgcmV0dXJuIHJldHVybmVkICNSZXR1cm5zIGxpc3Qgb2YgbmFtZXMgaW4gYW4gYXJyYXkgW1sibmFtZSIsIm9wIl1dCgpkZWYgb3BBbGwoYXJncz0iIix1c2VyPU5vbmUsaG9zdG1hc2s9Tm9uZSxleHRyYT17fSk6CiAgICB1c2VycyA9IGdldE5hbWVzQ2hhbm5lbChleHRyYVsiY2hhbm5lbCJdLGV4dHJhWyJpcmNzb2NrIl0uaXJjc29jaykKICAgIGZvciB4IGluIHJhbmdlKDAsbGVuKHVzZXJzKSsxLDQpOgogICAgICAgIHRyeTogZXh0cmFbImlyY3NvY2siXS5zZXRNb2RlKGV4dHJhWyJjaGFubmVsIl0sICIgIi5qb2luKFt1c2Vyc1t4XVswXSx1c2Vyc1t4KzFdWzBdLHVzZXJzW3grMl1bMF0sdXNlcnNbeCszXVswXV0pICwgIitvb29vIikKICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICB0cnk6IGV4dHJhWyJpcmNzb2NrIl0uc2V0TW9kZShleHRyYVsiY2hhbm5lbCJdLCAiICIuam9pbihbdXNlcnNbeF1bMF0sdXNlcnNbeCsxXVswXSx1c2Vyc1t4KzJdWzBdXSkgLCAiK29vb28iKQogICAgICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICAgICAgdHJ5OiBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoZXh0cmFbImNoYW5uZWwiXSwgIiAiLmpvaW4oW3VzZXJzW3hdWzBdLHVzZXJzW3grMV1bMF1dKSAsICIrb29vbyIpCiAgICAgICAgICAgICAgICBleGNlcHQ6IGV4dHJhWyJpcmNzb2NrIl0uc2V0TW9kZShleHRyYVsiY2hhbm5lbCJdLCAiICIuam9pbihbdXNlcnNbeF1bMF1dKSAsICIrb29vbyIpCgpkZWYgZGVvcEFsbChhcmdzPSIiLHVzZXI9Tm9uZSxob3N0bWFzaz1Ob25lLGV4dHJhPXt9KToKICAgIHVzZXJzID0gZ2V0TmFtZXNDaGFubmVsKGV4dHJhWyJjaGFubmVsIl0sZXh0cmFbImlyY3NvY2siXS5pcmNzb2NrKQogICAgZm9yIHggaW4gcmFuZ2UoMCxsZW4odXNlcnMpKzEsNCk6CiAgICAgICAgdHJ5OiBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoZXh0cmFbImNoYW5uZWwiXSwgIiAiLmpvaW4oW3VzZXJzW3hdWzBdLHVzZXJzW3grMV1bMF0sdXNlcnNbeCsyXVswXSx1c2Vyc1t4KzNdWzBdXSkucmVwbGFjZShleHRyYVsiY29uZmlnIl0ubmljaywiIikucmVwbGFjZSgiQm93c2VyaW5hdG9yIiwiIikucmVwbGFjZSgiQWVnaXNTZXJ2ZXIiLCIiKS5yZXBsYWNlKCIgICIsIiAiKSAsICItb29vbyIpCiAgICAgICAgZXhjZXB0OiAKICAgICAgICAgICAgdHJ5OiBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoZXh0cmFbImNoYW5uZWwiXSwgIiAiLmpvaW4oW3VzZXJzW3hdWzBdLHVzZXJzW3grMV1bMF0sdXNlcnNbeCsyXVswXV0pLnJlcGxhY2UoZXh0cmFbImNvbmZpZyJdLm5pY2ssIiIpLnJlcGxhY2UoIkJvd3NlcmluYXRvciIsIiIpLnJlcGxhY2UoIkFlZ2lzU2VydmVyIiwiIikucmVwbGFjZSgiICAiLCIgIikgLCAiLW9vb28iKQogICAgICAgICAgICBleGNlcHQ6IAogICAgICAgICAgICAgICAgdHJ5OiBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoZXh0cmFbImNoYW5uZWwiXSwgIiAiLmpvaW4oW3VzZXJzW3hdWzBdLHVzZXJzW3grMV1bMF1dKS5yZXBsYWNlKGV4dHJhWyJjb25maWciXS5uaWNrLCIiKS5yZXBsYWNlKCJCb3dzZXJpbmF0b3IiLCIiKS5yZXBsYWNlKCJBZWdpc1NlcnZlciIsIiIpLnJlcGxhY2UoIiAgIiwiICIpICwgIi1vb29vIikKICAgICAgICAgICAgICAgIGV4Y2VwdDogZXh0cmFbImlyY3NvY2siXS5zZXRNb2RlKGV4dHJhWyJjaGFubmVsIl0sICIgIi5qb2luKFt1c2Vyc1t4XVswXV0pLnJlcGxhY2UoZXh0cmFbImNvbmZpZyJdLm5pY2ssIiIpLnJlcGxhY2UoIkJvd3NlcmluYXRvciIsIiIpLnJlcGxhY2UoIkFlZ2lzU2VydmVyIiwiIikucmVwbGFjZSgiICAiLCIgIikgLCAiLW9vb28iKQoKZGVmIGtpY2tBbGwoYXJncz0iIix1c2VyPU5vbmUsaG9zdG1hc2s9Tm9uZSxleHRyYT17fSk6CiAgICB1c2VycyA9IGdldE5hbWVzQ2hhbm5lbChleHRyYVsiY2hhbm5lbCJdLGV4dHJhWyJpcmNzb2NrIl0uaXJjc29jaykKICAgIGZvciBpIGluIHVzZXJzOgogICAgICAgIGlmIGlbMF0gIT0gIkJvd3NlcmluYXRvciIgYW5kIGlbMF0gIT0gIkFlZ2lzU2VydmVyIiBhbmQgaVswXSAhPSBleHRyYVsiY29uZmlnIl0ubmljazoKICAgICAgICAgICAgZXh0cmFbImlyY3NvY2siXS5raWNrdXNlcihleHRyYVsiY2hhbm5lbCJdLGlbMF0sIllvdSBhcmUgYmVpbmcga2lja2VkIGFzIHBhcnQgb2Ygb3VyIGtpY2thbGwgY29tbWFuZC4iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCiAgICAgICAgICAgIApkZWYgbWFzc2hpZ2hsaWdodChhcmdzPSIiLHVzZXI9Tm9uZSxob3N0bWFzaz1Ob25lLGV4dHJhPXt9KToKICAgIHVzZXJzID0gZ2V0TmFtZXNDaGFubmVsKGV4dHJhWyJjaGFubmVsIl0sZXh0cmFbImlyY3NvY2siXS5pcmNzb2NrKQogICAgcmV0dXJuZWQgPSAiIgogICAgZm9yIGkgaW4gdXNlcnM6CiAgICAgICAgcmV0dXJuZWQgPSByZXR1cm5lZCArIGlbMF0gKyAiICIKICAgIGV4dHJhWyJpcmNzb2NrIl0uc2VuZG1zZyhleHRyYVsiY2hhbm5lbCJdLHJldHVybmVkKQoKZGVmIHRha2VPdmVyKGFyZ3M9IiIsdXNlcj1Ob25lLGhvc3RtYXNrPU5vbmUsZXh0cmE9e30pOgogICAgdXNlcnMgPSBnZXROYW1lc0NoYW5uZWwoZXh0cmFbImNoYW5uZWwiXSxleHRyYVsiaXJjc29jayJdLmlyY3NvY2spCiAgICBjaGFubmVsID0gZXh0cmFbImNoYW5uZWwiXQogICAgZXh0cmFbImlyY3NvY2siXS5qb2luY2hhbihjaGFubmVsKQogICAgZXh0cmFbImlyY3NvY2siXS5zZW5kbXNnKCJDaGFuU2VydiIsIm9wIHswfSIuZm9ybWF0KGNoYW5uZWwpKQogICAgZXh0cmFbImlyY3NvY2siXS5zZXRNb2RlKGNoYW5uZWwsInVuYWZmaWxpYXRlZC9ib3dzZXJpbmF0b3IiLCIrZSIpCiAgICBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoY2hhbm5lbCwiMjM0LjExMi4xOTcuMTA0LmJjLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsIitlIikKICAgIGV4dHJhWyJpcmNzb2NrIl0uc2V0TW9kZShjaGFubmVsLGV4dHJhWyJjb25maWciXS5pcCwiK2UiKQogICAgZXh0cmFbImlyY3NvY2siXS5qb2luY2hhbihjaGFubmVsKQogICAgZXh0cmFbImlyY3NvY2siXS5zZW5kbXNnKCJDaGFuU2VydiIsIm9wIHswfSIuZm9ybWF0KGNoYW5uZWwpKQogICAKICAgICNUT0RPIFNFTEYgT1AgV0hJTEUgVEFLRU9WRVIKICAgICNKT0lOIE9OIEtJQ0sgT04gVEFLRU9WRVIKICAgIGZvciBpIGluIHVzZXJzOgogICAgICAgICNleHRyYVsiaXJjc29jayJdLmJhbihjaGFubmVsLCIqIikKICAgICAgICBpZiBpWzBdICE9ICJCb3dzZXJpbmF0b3IiIGFuZCBpWzBdICE9ICJBZWdpc1NlcnZlciIgYW5kIGlbMF0gIT0gZXh0cmFbImNvbmZpZyJdLm5pY2s6IAogICAgICAgICAgICBleHRyYVsiaXJjc29jayJdLmJhbihjaGFubmVsLGlbMF0pCiAgICAgICAgICAgIGV4dHJhWyJpcmNzb2NrIl0ua2lja3VzZXIoY2hhbm5lbCxpWzBdLCJUYWtlb3ZlciBpbiBwcm9ncmVzcywgcGxlYXNlIHJlbWFpbiBjYWxtIikKICAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgIGlyY21zZyA9IGV4dHJhWyJpcmNzb2NrIl0uaXJjc29jay5yZWN2KDIwNDgpLmRlY29kZSgndXRmLTgnLCAnaWdub3JlJykgICMgcmVjZWl2ZSBkYXRhIGZyb20gdGhlIHNlcnZlcgogICAgICAgIGlyY21zZyA9IGlyY21zZy5zdHJpcCgnCg0nKSAKICAgICAgICBpZiAiIEtJQ0sgIiBpbiBpcmNtc2cgYW5kIGV4dHJhWyJjb25maWciXS5uaWNrLmxvd2VyKCkgaW4gaXJjbXNnOgogICAgICAgICAgICBleHRyYVsiaXJjc29jayJdLmpvaW5jaGFuKGNoYW5uZWwpCiAgICAgICAgICAgIGV4dHJhWyJpcmNzb2NrIl0uc2VuZG1zZygiQ2hhblNlcnYiLCJvcCB7MH0iLmZvcm1hdChjaGFubmVsKSkKICAgICAgICBlbGlmICIgTU9ERSAiIGluIGlyY21zZyBhbmQgIi1vIiBpbiBpcmNtc2c6CiAgICAgICAgICAgIGV4dHJhWyJpcmNzb2NrIl0uc2VuZG1zZygiQ2hhblNlcnYiLCJvcCB7MH0iLmZvcm1hdChjaGFubmVsKSkKICAgICAgICAgICAgCiAgICBleHRyYVsiaXJjc29jayJdLmJhbihjaGFubmVsLCIqISpAKiQjI2Jvd3NlcmluYXRvciIpCiAgICBmb3IgaSBpbiB1c2VyczoKICAgICAgICBpZiBpWzBdICE9ICJCb3dzZXJpbmF0b3IiIGFuZCBpWzBdICE9ICJBZWdpc1NlcnZlciIgYW5kIGlbMF0gIT0gZXh0cmFbImNvbmZpZyJdLm5pY2s6IAogICAgICAgICAgICBleHRyYVsiaXJjc29jayJdLmJhbihjaGFubmVsLGlbMF0pCiAgICAgICAgICAgIAogICAgZXh0cmFbImlyY3NvY2siXS5zZXRNb2RlKGNoYW5uZWwsIiIsIitpIikKICAgIGV4dHJhWyJpcmNzb2NrIl0uc2V0TW9kZShjaGFubmVsLCIiLCIrTSIpCiAgICBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoY2hhbm5lbCwiIiwiK1MiKQogICAgZXh0cmFbImlyY3NvY2siXS5zZXRNb2RlKGNoYW5uZWwsIHN0cihyYW5kb20ucmFuZGludCgwLDEwMDAwMCkpICwiK2siKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCmRlZiB1bnRha2VPdmVyKGFyZ3M9IiIsdXNlcj1Ob25lLGhvc3RtYXNrPU5vbmUsZXh0cmE9e30pOgogICAgY2hhbm5lbCA9IGV4dHJhWyJjaGFubmVsIl0KICAgIGV4dHJhWyJpcmNzb2NrIl0udW5iYW4oY2hhbm5lbCwiKiIpCiAgICBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoY2hhbm5lbCwiIiwiLWkiKQogICAgZXh0cmFbImlyY3NvY2siXS5zZXRNb2RlKGNoYW5uZWwsIiIsIi1NIikKICAgIGV4dHJhWyJpcmNzb2NrIl0uc2V0TW9kZShjaGFubmVsLCIiLCItUyIpCiAgICBleHRyYVsiaXJjc29jayJdLnNldE1vZGUoY2hhbm5lbCwgIioiICwiLWsiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKZGVmIHNwYW0oYXJncz0iIix1c2VyPU5vbmUsaG9zdG1hc2s9Tm9uZSxleHRyYT17fSk6CiAgICAjQHNwYW0gPGFtb3VudD4gPGRlbGF5PiA8bWVzc2FnZT4KICAgIGFtb3VudCA9IGFyZ3Muc3BsaXQoIiAiKVswXQogICAgZGVsYXkgPSBhcmdzLnNwbGl0KCIgIilbMV0KICAgIHRyeTogbWVzc2FnZSA9IGFyZ3Muc3BsaXQoYW1vdW50KyAiICIgKyBkZWxheSsiICIpWzFdCiAgICBleGNlcHQ6IG1lc3NhZ2UgPSAiU1BBTSIKICAgIAogICAgdHJ5OiAKICAgICAgICBmb3IgaSBpbiByYW5nZSgwLGludChmbG9hdChhbW91bnQpKSk6CiAgICAgICAgICAgIHRpbWUuc2xlZXAoZmxvYXQoZGVsYXkpKQogICAgICAgICAgICBleHRyYVsiaXJjc29jayJdLnNlbmRtc2coZXh0cmFbImNoYW5uZWwiXSxtZXNzYWdlKQogICAgICAgIHJldHVybiAiRG9uZSBzcGFtbWluZyBmb3IgdGhlIGRheS4iCiAgICBleGNlcHQ6CiAgICAgICAgcmV0dXJuICJJbnZhbGlkIGFyZ3VtZW50cywgdXNlIHNwYW0gPGFtb3VudD4gPGRlbGF5PiA8bWVzc2FnZT4iCgp0YWtlT3ZlciA9IHVudGFrZU92ZXI="""

import base64
import sys, StringIO, contextlib

@contextlib.contextmanager
def stdoutIO(stdout=None):
    old = sys.stdout
    if stdout is None:
        stdout = StringIO.StringIO()
    sys.stdout = stdout
    yield stdout
    sys.stdout = old
    
with stdoutIO() as s:
    exec base64.b64decode(data)
    print s.getvalue()
